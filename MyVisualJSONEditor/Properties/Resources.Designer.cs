//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyVisualJSONEditor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MyVisualJSONEditor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&quot;id&quot; : &quot;http://vit.com.ua/edgeserver/definitions#&quot;,
        ///	&quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
        ///
        ///	&apos;definitions&apos; : {
        ///		
        ///		&apos;FrameReact&apos; : {
        ///			
        ///			&apos;type&apos; : &apos;object&apos;,
        ///
        ///			&apos;properties&apos; : {
        ///
        ///				&quot;Channel&quot;: {
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				},                             
        ///				&quot;Prefix&quot;:{
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				},                            
        ///				&quot;Suffix&quot;:{
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				},                              
        ///				&quot;Dir&quot;:{
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				}
        ///			},
        ///
        ///			&quot;requir [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string definitions {
            get {
                return ResourceManager.GetString("definitions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&quot;Store&quot;:
        ///	{
        ///		&quot;ParamSet&quot;:
        ///		{
        ///			&quot;DbHost&quot;:&quot;127.0.0.1&quot;,
        ///			&quot;DbPort&quot;: 5432,
        ///			&quot;DbName&quot;:&quot;autocode&quot;,
        ///			&quot;DbUser&quot;:&quot;autocode&quot;,
        ///			&quot;DbPass&quot;: &quot;autocode&quot;,
        ///			&quot;PostName&quot;:&quot;EdgeServer&quot;,
        ///			&quot;Post&quot;:&quot;69e86fa7-e1ad-4e68-96b7-b910f40bdb49&quot;
        ///		}
        ///	},
        ///
        ///	&quot;SocketApi&quot;: 
        ///	{
        ///		&quot;ParamSet&quot;: 
        ///		{
        ///			&quot;Host&quot;: &quot;127.0.0.1&quot;,
        ///			&quot;Port&quot;: 14
        ///		}
        ///	},
        ///	 &quot;FileApi&quot;:
        ///	 {
        ///	   &quot;AddFactReact&quot;:
        ///	   [
        ///		 {
        ///		   &quot;ParamSet&quot;:
        ///		   {
        ///			 &quot;Channel&quot;:0,
        ///			 &quot;Prefix&quot;:&quot;&quot;,
        ///			 &quot;Suffix&quot;:&quot;&quot;,
        ///			 &quot;Dir&quot;:&quot;/tmp/edge/event_store/stor [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventStore {
            get {
                return ResourceManager.GetString("EventStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// {
        ///	&quot;id&quot; : &quot;http://vit.com.ua/edgeserver/eventstore#&quot;,
        ///	&quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
        ///
        ///	&quot;title&quot; : &quot;EventStore main.xconf&quot;,
        ///	&quot;type&quot; : &quot;object&quot;,
        ///
        ///	&apos;format&apos; : &apos;tab&apos;,
        ///
        ///	&quot;definitions&quot; : {
        ///
        ///		&quot;DbStore.ParamSet&quot; : {
        ///
        ///			&quot;type&quot; : &quot;object&quot;,
        ///
        ///			&quot;properties&quot;: {
        ///					
        ///				&quot;DbHost&quot;: {
        ///					&quot;title&quot; : &quot;Host&quot;,
        ///					&quot;type&quot;: &quot;string&quot;,
        ///					&quot;format&quot;: &quot;ipv4&quot;,
        ///					&quot;default&quot;: &quot;127.0.0.1&quot;,
        ///					&quot;binding&quot; : {
        ///						&quot;path&quot; : &quot;DbHost&quot;
        ///					}
        ///				},
        ///				&quot;DbPort&quot;: {
        ///					&quot;title&quot; : [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventStore_schema {
            get {
                return ResourceManager.GetString("EventStore_schema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  
        ///	&quot;Import&quot;:
        ///	{
        ///		&quot;File&quot;:&quot;/opt/edge/libexec/mediacodec/libimport-file.so&quot;,
        ///		&quot;ParamSet&quot;:
        ///		{
        ///			&quot;FrameMeta&quot;:
        ///			{
        ///				&quot;Prefix&quot;:&quot;&quot;,
        ///				&quot;Suffix&quot;:&quot;.gscene&quot;,
        ///				&quot;Dir&quot;:&quot;&quot;
        ///			},
        ///			&quot;FrameData&quot;:
        ///			{
        ///				&quot;Prefix&quot;:&quot;&quot;,
        ///				&quot;Suffix&quot;:&quot;.gframe&quot;,
        ///				&quot;Dir&quot;:&quot;&quot;
        ///			}
        ///		}
        ///	},
        ///	&quot;Codec&quot;:
        ///	{
        ///		&quot;File&quot;:&quot;/opt/edge/libexec/mediacodec/libcodec-jpegturbo.so&quot;,
        ///		&quot;Source&quot;:&quot;MONO8T&quot;,
        ///		&quot;Target&quot;:&quot;JPEG&quot;,
        ///		&quot;ParamSet&quot;: {}
        ///	},
        ///	&quot;Export&quot;:
        ///	{
        ///		&quot;File&quot;:&quot;/opt/edge/libexec/mediacodec/libexport-file.so&quot;,
        ///		&quot;Par [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MediaCodec {
            get {
                return ResourceManager.GetString("MediaCodec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&quot;id&quot; : &quot;http://vit.com.ua/edgeserver/mediacodec#&quot;,
        ///	&quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
        ///
        ///	&apos;title&apos; : &apos;MediaCodec main.conf&apos;,
        ///	&apos;type&apos; : &apos;object&apos;,
        ///
        ///	&apos;definitions&apos; : {
        ///
        ///		&apos;Frame&apos; : {
        ///
        ///			&apos;type&apos; : &apos;object&apos;,
        ///
        ///			&apos;properties&apos; : {
        ///
        ///				&quot;Prefix&quot; : {
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				},
        ///				&quot;Suffix&quot; : {
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				},
        ///				&quot;Dir&quot; : {
        ///					&apos;type&apos; : &apos;string&apos;,
        ///				},
        ///			},
        ///
        ///			&quot;required&quot; : [ &apos;Prefix&apos;, &quot;Suffix&quot;, &apos;Dir&apos; ],
        ///			&quot;additionalProperties&quot;: false,
        ///		}, 
        ///		        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MediaCodec_schema {
            get {
                return ResourceManager.GetString("MediaCodec_schema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;Store&quot;:
        ///  {
        ///    &quot;ParamSet&quot;:
        ///    {
        ///      &quot;RootDir&quot;:&quot;var/opt/edge/mediastore.0/&quot;,        // string
        ///      &quot;Channels&quot;:
        ///      [
        ///        {
        ///          &quot;Name&quot;:&quot;0&quot;,                                // string
        ///          &quot;DepthAsMin&quot;:30                            // uint
        ///        }
        ///      ]
        ///    }
        ///  },
        ///  &quot;SocketApi&quot;:
        ///  {
        ///    &quot;ParamSet&quot;:
        ///    {
        ///      &quot;EndPoint&quot;:&quot;/tmp/edge/mediastore.0.endpoint&quot;,  // string
        ///      &quot;MaxClients&quot;:1                                 // uint
        ///    }
        ///  },
        ///  &quot;FileApi&quot;:
        ///  {
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MediaStore {
            get {
                return ResourceManager.GetString("MediaStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///
        ///	&quot;id&quot; : &quot;http://vit.com.ua/edgeserver/mediastore#&quot;,
        ///	&quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
        ///
        ///	&apos;title&apos; : &apos;MediaStore main.conf&apos;,
        ///	&apos;type&apos; : &apos;object&apos;,
        ///
        ///	&apos;definitions&apos; : {
        ///
        ///		
        ///
        ///		&apos;Store.ParamSet&apos; : {
        ///			
        ///			&apos;type&apos; : &apos;object&apos;,
        ///
        ///			&apos;properties&apos; : {
        ///				
        ///				&quot;RootDir&quot;: {
        ///					&apos;type&apos; : &apos;string&apos;
        ///				},
        ///				&quot;Channels&quot;: { 
        ///
        ///					&apos;type&apos; : &apos;array&apos;,
        ///
        ///					&quot;items&quot; : {
        ///						
        ///						&quot;title&quot; : &quot;item&quot;,
        ///						&quot;type&quot; : &quot;object&quot;,
        ///
        ///						&quot;properties&quot; : 
        ///						{
        ///							&quot;Name&quot;: { 
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MediaStore_schema {
            get {
                return ResourceManager.GetString("MediaStore_schema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;RxPipe&quot;:&quot;pathto/fifo&quot;,                                   // string
        ///  &quot;MappingConf&quot;:&quot;/etc/edge/radar.0/mapping.conf&quot;,           // string
        ///  &quot;Driver&quot;:
        ///  {
        ///    &quot;File&quot;:&quot;/opt/edge/libexec/radar/libdriver-protocol.so&quot;, // string
        ///    &quot;ParamSet&quot;:
        ///    {
        ///      ...
        ///    }
        ///  },
        ///  &quot;Tracker&quot;:
        ///  {
        ///    &quot;SceneTout&quot;:50,
        ///    &quot;CloseTout&quot;:300,
        ///    &quot;MaxFragSize&quot;:10,
        ///    &quot;MaxTrackCount&quot;:64,
        ///    &quot;MaxSceneCount&quot;:50
        ///  },
        ///  &quot;SceneExport&quot;:
        ///  {
        ///    &quot;QueueSet&quot;:
        ///    [
        ///      {
        ///        &quot;File&quot;:&quot;pathto/libscene_ex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Radar {
            get {
                return ResourceManager.GetString("Radar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;RxPipe&quot;:&quot;pathto/fifo&quot;,                                   // string
        ///  &quot;MappingConf&quot;:&quot;/etc/edge/radar.0/mapping.conf&quot;,           // string
        ///  &quot;Driver&quot;:
        ///  {
        ///    &quot;File&quot;:&quot;/opt/edge/libexec/radar/libdriver-protocol.so&quot;, // string
        ///    &quot;ParamSet&quot;:
        ///    {
        ///      ...
        ///    }
        ///  },
        ///  &quot;Tracker&quot;:
        ///  {
        ///    &quot;SceneTout&quot;:50,
        ///    &quot;CloseTout&quot;:300,
        ///    &quot;MaxFragSize&quot;:10,
        ///    &quot;MaxTrackCount&quot;:64,
        ///    &quot;MaxSceneCount&quot;:50
        ///  },
        ///  &quot;SceneExport&quot;:
        ///  {
        ///    &quot;QueueSet&quot;:
        ///    [
        ///      {
        ///        &quot;File&quot;:&quot;pathto/libscene_ex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Radar_schema {
            get {
                return ResourceManager.GetString("Radar_schema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&apos;boolean&apos; : true,
        ///	&apos;string&apos; : &apos;string&apos;
        ///}.
        /// </summary>
        internal static string TestData {
            get {
                return ResourceManager.GetString("TestData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&apos;type&apos;:&apos;object&apos;, 
        ///	
        ///
        ///    &apos;title&apos;:&apos;Root Object Title&apos;,
        ///	&apos;description&apos; : &apos;This is Root Object description&apos;,
        ///
        ///    &apos;properties&apos;:{
        ///
        ///		&apos;boolean&apos; : {
        ///            &apos;type&apos;:&apos;boolean&apos;,
        ///			default : true,
        ///			readonly : true
        ///        },
        ///        &apos;string&apos; : {
        ///            &apos;type&apos;:&apos;string&apos;,
        ///			visible : false
        ///        },
        ///		&apos;object&apos; : {
        ///
        ///			type : [ &apos;object&apos;, &apos;null&apos;],
        ///
        ///			title : &apos;This is the object&apos;,
        ///			description : &apos;This is the object description&apos;,
        ///
        ///			&apos;properties&apos; : {
        ///				&apos;bool1&apos; : {
        ///					&apos;type&apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TestSchema {
            get {
                return ResourceManager.GetString("TestSchema", resourceCulture);
            }
        }
    }
}
